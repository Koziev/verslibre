"""
End-2-end –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–∏—Ñ–º–æ–≤–∞–Ω–Ω–æ–≥–æ —á–µ—Ç–≤–µ—Ä–æ—Å—Ç–∏—à—å—è —Å –ø–æ–º–æ—â—å—é –æ—Ç—Ñ–∞–π–Ω—Ç—é–Ω–µ–Ω–Ω–æ–π GPT —Å –º–∞—Ä–∫–∏—Ä–æ–≤–∫–æ–π —É–¥–∞—Ä–µ–Ω–∏–π.
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤–≤–æ–¥–∏–º–∞—è –∑–∞—Ç—Ä–∞–≤–∫–∞ –≤ –≤–∏–¥–µ —Å–ª–æ–≤–æ—Å–æ—á–µ—Ç–∞–Ω–∏—è (–∏–º–µ–Ω–Ω–∞—è –≥—Ä—É–ø–ø–∞).

09-12-2021 –ü–æ–¥–∫–ª—é—á–µ–Ω StressedGptTokenizer –∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è tokenizer_config.json
09-12-2021 –î–æ—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–∞
11-12-2021 –ü–µ—Ä–µ–ø–∏—Å—ã–≤–∞–µ–º –∫–æ–¥ top_t+top_p —Å—ç–º–ø–ª–∏–Ω–≥–∞, —á—Ç–æ–±—ã –±–∞–Ω–∏—Ç—å —Ü–µ–ø–æ—á–∫–∏ —Å –ø–æ–≤—Ç–æ—Ä–æ–º —Ä–∏—Ñ–º—É–µ–º–æ–≥–æ —Å–ª–æ–≤–∞.
14-12-2021 –î–æ–±–∞–≤–ª–µ–Ω –∫–æ–¥ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø–∞–∫–µ—Ç–Ω–æ–π –æ—Ü–µ–Ω–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏.
18-12-2021 –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ü–∏—è –ø—Ä–æ–±–µ–ª–æ–≤ –ø–æ—Å–ª–µ –¥–µ–∫–æ–¥–µ—Ä–∞, –º–æ–¥—É–ª—å whitespace_normalization
27-01-2022 –≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç —Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º —Ñ–æ—Ä–º–∞—Ç–æ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å –ø–æ–º–æ—â—å—é —Ç–µ–≥–æ–≤ [—Å—Ç–∏—Ö | –æ–¥–Ω–æ—Å—Ç–∏—à—å–µ | –¥–≤—É—Å—Ç–∏—à—å–µ | –ø–æ—Ä–æ—à–æ–∫]
08.02.2022 –í —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–¥–Ω–æ–π —Ä–∏—Ñ–º–æ–≤–∫–∏ (–≤–∫–ª—é—á–∞—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ —Ä–∏—Ñ–º—É–µ–º–æ–≥–æ —Å–ª–æ–≤–∞)
21.02.2022 –î–æ–±–∞–≤–ª–µ–Ω–∞ –º–æ–¥–µ–ª—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª–µ–¥—É—é—â–∏—Ö 4—Ö —Å—Ç—Ä–æ—á–µ–∫ –ø–æ –ø–µ—Ä–≤–æ–º—É —á–µ—Ç–≤–µ—Ä–æ—Å—Ç–∏—à—å—é.
26.02.2022 –†–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ - –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ç–∏—Ö–∞, —Ä–∞–Ω–∂–∏—Ä–æ–≤–∫–∞ –∏ –ø—Ä–æ—á–µ–µ –≤—ã–Ω–µ—Å–µ–Ω—ã –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π –º–æ–¥—É–ª—å, –∞ —Ç—É—Ç –æ—Å—Ç–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ñ—Ä–æ–Ω—Ç
03.05.2022 –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ "–ù–æ–≤–∞—è —Ç–µ–º–∞" –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–æ–≤—ã—Ö —Å–∞–¥–∂–µ—Å—Ç–æ–≤
08.05.2022 –≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç —Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π —Ä—É–±–∞–∏
08.05.2022 –ò–∑ —Ç–µ–ª–µ–≥—Ä–∞–º-–≤–µ—Ä—Å–∏–∏ –∏—Å–∫–ª—é—á–µ–Ω —Ä–µ–∂–∏–º –º–æ–Ω–æ—Å—Ç–∏—Ö–æ–≤
24.05.2022 –î–æ–±–∞–≤–ª–µ–Ω –≤—Ç–æ—Ä–æ–π —É—Ä–æ–≤–µ–Ω—å —Ä—É–±—Ä–∏–∫–∞—Ü–∏–∏ —á–µ—Ç–≤–µ—Ä–æ—Å—Ç–∏—à–∏–π - –≤—ã–¥–µ–ª–µ–Ω—ã —Ä—É–±–∞–∏, —á–∞—Å—Ç—É—à–∫–∏, –º–∏—Å—Ç–∏–∫–∞ –∏ —Ç.–¥.
27.05.2022 –í —Ä–µ–∂–∏–º–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä—É–±–∞–∏ –Ω–µ –¥–µ–ª–∞–µ—Ç—Å—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ (—Å–ª–µ–¥. 4 —Å—Ç—Ä–æ–∫–∏ –ø–æ –ø–µ—Ä–≤—ã–º 4–º)
22.10.2022 –†–µ–∞–ª–∏–∑–æ–≤–∞–Ω –ø–æ–≤—Ç–æ—Ä –ø–æ–ø—ã—Ç–æ–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å –ø–æ–≤—ã—à–µ–Ω–Ω–æ–π —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–æ–π, –µ—Å–ª–∏ –≤—Å–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç—Å–µ—è–Ω—ã —Ñ–∏–ª—å—Ç—Ä–∞–º–∏ –∫–∞—á–µ—Å—Ç–≤–∞
23.10.2022 –≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç —Å –æ—Ç–¥–µ–ª—å–Ω–æ–π –º–æ–¥–µ–ª—å—é –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–ª–∏–Ω–Ω—ã—Ö —Å—Ç–∏—Ö–æ–≤: LongPoetryGenerator
27.10.2022 –ï—Å–ª–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –≤ –º–æ–¥–µ–ª–∏ long poems –Ω–∏—á–µ–≥–æ –Ω–µ –¥–∞–ª–∞, –∑–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –≤ —Å—Ç–∞—Ä–æ–π –º–æ–¥–µ–ª–∏ 4-—Å—Ç—Ä–æ—á–Ω–∏–∫–æ–≤.
11.11.2022 –ë–æ–ª—å—à–∞—è —á–∏—Å—Ç–∫–∞: —É–±–∏—Ä–∞–µ–º –≤—Å–µ –∂–∞–Ω—Ä—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏, –∫—Ä–æ–º–µ –ª–∏—Ä–∏–∫–∏, –º–µ–Ω—è–µ–º —Å—Ç–∞—Ä—Ç–æ–≤—ã–π —ç–∫—Ä–∞–Ω. –ù–æ–≤–æ–µ —è–¥—Ä–æ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞.
21.11.2022 –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –º–æ–¥–µ–ª—å GPT 355, –¥–∞—Ç–∞—Å–µ—Ç —Ñ–∞–π–Ω—Ç—é–Ω–∞ –±–µ–∑ –∂–∞–Ω—Ä–æ–≤ –≤–æ–æ–±—â–µ
"""

import os
import io
import logging
import argparse
import traceback
import getpass

import telegram
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, CallbackQueryHandler
from telegram import ReplyKeyboardMarkup, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardRemove, Update

import tensorflow as tf

from generative_poetry.init_logging import init_logging
from generative_poetry.poetry_seeds import SeedGenerator

from generative_poetry.long_poem_generator2 import LongPoemGeneratorCore2


def get_user_id(update: Update) -> str:
    user_id = str(update.message.from_user.id)
    return user_id


def render_poem_html(poem_txt):
    # 03.02.2022 –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ —Ç–µ–∫—Å—Ç–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å—Ç–∏—Ö–∞ –≤ HTML —Ñ–æ—Ä–º–∞—Ç–µ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–º–µ
    s = '<pre>' + poem_txt + '</pre>'
    return s


def render_error_html(error_text):
    s = '<pre>ü•µ\n' + error_text + '</pre>'
    return s


top_p = 1.00
top_k = 0
typical_p = 0.6


LIKE = '–ù—Ä–∞–≤–∏—Ç—Å—è!'
DISLIKE = '–ü–ª–æ—Ö–æ :('
NEW = '–ù–æ–≤–∞—è —Ç–µ–º–∞'
MORE = '–ï—â–µ...'

last_user_poems = dict()
last_user_poem = dict()
user_format = dict()


FORMAT__COMMON = '–õ–∏—Ä–∏–∫–∞'
FORMAT__1LINER = '–û–¥–Ω–æ—Å—Ç—Ä–æ—á–Ω–∏–∫–∏'
FORMAT__2LINER = '–î–≤—É—Ö—Å—Ç—Ä–æ—á–Ω–∏–∫–∏'
FORMAT__POROSHKI = '–ü–∏—Ä–æ–∂–∫–∏ –∏ –ø–æ—Ä–æ—à–∫–∏'
FORMAT__RUBAI = '–†—É–±–∞–∏'
FORMAT__KID = "–î–ª—è –¥–µ—Ç–µ–π"
FORMAT__PHIL = "–§–∏–ª–æ—Å–æ—Ñ—Å–∫–∏–µ"
FORMAT__HUM = "–Æ–º–æ—Ä –∏ —Å–∞—Ç–∏—Ä–∞"
#FORMAT__MIST = "–ú–∏—Å—Ç–∏–∫–∞"   23.10.2022 –º–∏—Å—Ç–∏–∫–∞ –æ–±—ä–µ–¥–∏–Ω–∏–ª–∞—Å—å —Å –ª–∏—Ä–∏–∫–æ–π –≤ –Ω–æ–≤–æ–π –º–æ–¥–µ–ª–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–ª–∏–Ω–Ω—ã—Ö —Å—Ç–∏—Ö–æ–≤
FORMAT__FOLK = "–ß–∞—Å—Ç—É—à–∫–∏"


def start(update, context) -> None:
    user_id = get_user_id(update)
    logging.debug('Entering START callback with user_id=%s', user_id)

    # 08.05.2022 —Å–±—Ä–æ—Å–∏–º –∏—Å—Ç–æ—Ä–∏—é –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞—Ç—Ä–∞–≤–æ–∫
    seed_generator.restart_user_session(user_id)

    intro_text = "–ü—Ä–∏–≤–µ—Ç, {}!\n\n".format(update.message.from_user.full_name) + \
    "–Ø - –±–æ—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ç–∏—Ö–æ–≤ (–≤–µ—Ä—Å–∏—è –æ—Ç 21.11.2022).\n" + \
    "–î–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ kelijah@yandex.ru –∏–ª–∏ https://github.com/Koziev/verslibre.\n\n" + \
    "–¢–µ–ø–µ—Ä—å –≤–≤–æ–¥–∏—Ç–µ —Ç–µ–º—É - –∫–∞–∫–æ–µ-–Ω–∏–±—É–¥—å —Å—É—â–µ—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–µ –∏–ª–∏ —Å–æ—á–µ—Ç–∞–Ω–∏–µ –ø—Ä–∏–ª–∞–≥–∞—Ç–µ–ª—å–Ω–æ–≥–æ –∏ —Å—É—â–µ—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–≥–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä <i>–∑–∞–¥–æ—Ä–Ω–∞—è —É–ª—ã–±–∫–∞</i>, " + \
    "–∏ —è —Å–æ—á–∏–Ω—é —Å—Ç–∏—à–æ–∫ —Å —ç—Ç–∏–º–∏ —Å–ª–æ–≤–∞–º–∏.\n\n" + \
    "–ú–æ–∂–µ—Ç–µ —Ç–∞–∫–∂–µ –∑–∞–¥–∞–≤–∞—Ç—å –ø–æ–ª–Ω—É—é –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É, –Ω–∞–ø—Ä–∏–º–µ—Ä <i>–£ –±—É—Ä–Ω—ã—Ö —á—É–≤—Å—Ç–≤ –Ω–µ–∏—Å—Ç–æ–≤—ã–π –∫–æ–Ω–µ—Ü</i>, —è –ø–æ–ø—Ä–æ–±—É—é –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ—Ç –Ω–µ–µ.\n\n" + \
    "–õ–∏–±–æ –≤—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ç–æ–≤—É—é —Ç–µ–º—É - —Å–º. –∫–Ω–æ–ø–∫–∏ –≤–Ω–∏–∑—É.\n" + \
    "–ö–Ω–æ–ø–∫–∞ [<b>–ï—â—ë</b>] –≤—ã–≤–µ–¥–µ—Ç –Ω–æ–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç —Å—Ç–∏—Ö–∞ –Ω–∞ –∑–∞–¥–∞–Ω–Ω—É—é —Ç–µ–º—É. –ö–Ω–æ–ø–∫–∞ [<b>–ù–æ–≤–∞—è —Ç–µ–º–∞</b>] –≤—ã–≤–µ–¥–µ—Ç –Ω–æ–≤—ã–µ –∑–∞—Ç—Ä–∞–≤–∫–∏."

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Ä—Ü–∏—é —Å–∞–¥–∂–µ—Å—Ç–æ–≤ (–æ–±—ã—á–Ω–æ 3 —à—Ç—É–∫–∏) –ø–æ–¥ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∂–∞–Ω—Ä, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–µ –ø—Ä–∏—à–ª–æ—Å—å –Ω–∞–ø—Ä—è–≥–∞—Ç—å—Å—è
    # —Å –ø—Ä–∏–¥—É–º—ã–≤–∞–Ω–∏–µ–º –∑–∞—Ç—Ä–∞–≤–æ–∫.
    seeds = seed_generator.generate_seeds(user_id, domain=user_format.get(user_id))
    keyboard = [seeds]
    reply_markup = ReplyKeyboardMarkup(keyboard,
                                       one_time_keyboard=True,
                                       resize_keyboard=True,
                                       per_user=True)

    context.bot.send_message(chat_id=update.message.chat_id, text=intro_text, reply_markup=reply_markup, parse_mode='HTML')
    logging.debug('Leaving START callback with user_id=%s', user_id)


def dbg_actions(update, context):
    pass # TODO ...
    return


def echo_on_error(context, update, user_id):
    keyboard = [seed_generator.generate_seeds(user_id, domain='–ª–∏—Ä–∏–∫–∞')]
    reply_markup = ReplyKeyboardMarkup(keyboard,
                                       one_time_keyboard=True,
                                       resize_keyboard=True,
                                       per_user=True)

    context.bot.send_message(chat_id=update.message.chat_id,
                             text=render_error_html('–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ, –ø–æ—ç—Ç–æ–º—É –≤—ã–ø–æ–ª–Ω–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å.\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –¥–ª—è –Ω–æ–≤–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é.'),
                             reply_markup=reply_markup, parse_mode='HTML')
    return


def echo(update, context):
    try:
        user_id = get_user_id(update)
        format = '–ª–∏—Ä–∏–∫–∞'

        if update.message.text == NEW:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç, —á—Ç–æ–±—ã –µ–º—É –ø—Ä–µ–¥–ª–æ–∂–∏–ª–∏ –Ω–æ–≤—ã–µ —Å–∞–¥–∂–µ—Å—Ç—ã –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏.
            last_user_poem[user_id] = None
            last_user_poems[user_id] = []

            keyboard = [seed_generator.generate_seeds(user_id, domain=format)]
            reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True, per_user=True)
            context.bot.send_message(chat_id=update.message.chat_id,
                                     text="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é",
                                     reply_markup=reply_markup)
            return

        if update.message.text == LIKE:
            if user_id not in last_user_poem:
                echo_on_error(context, update, user_id, format)
                return

            # –ö–∞–∫–æ–π —Ç–µ–∫—Å—Ç –ø–æ–ª–∞–π–∫–∞–ª–∏:
            poem = last_user_poem[user_id].replace('\n', ' | ')
            logging.info('LIKE: poem="%s" user="%s"', poem, user_id)

            if len(last_user_poems[user_id]):
                keyboard = [[NEW, MORE]]
            else:
                keyboard = [[NEW]]

            reply_markup = ReplyKeyboardMarkup(keyboard,
                                               one_time_keyboard=True,
                                               resize_keyboard=True,
                                               per_user=True)

            context.bot.send_message(chat_id=update.message.chat_id, text="–°–ø–∞—Å–∏–±–æ :)", reply_markup=reply_markup)
            return

        if update.message.text == DISLIKE:
            if user_id not in last_user_poem:
                echo_on_error(context, update, user_id, format)
                return

            # –ö–∞–∫–æ–π —Ç–µ–∫—Å—Ç –Ω–µ –ø–æ–Ω—Ä–∞–≤–∏–ª—Å—è:
            poem = last_user_poem[user_id].replace('\n', ' | ')
            logging.info('DISLIKE: poem="%s" user="%s"', poem, user_id)

            if len(last_user_poems[user_id]):
                keyboard = [[NEW, MORE]]
            else:
                keyboard = [[NEW]]

            reply_markup = ReplyKeyboardMarkup(keyboard,
                                               one_time_keyboard=True,
                                               resize_keyboard=True,
                                               per_user=True)

            context.bot.send_message(chat_id=update.message.chat_id, text="–ü–æ–Ω—è—Ç–Ω–æ. –ñ–∞–ª—å :(", reply_markup=reply_markup)
            return

        if update.message.text == MORE:
            # –í—ã–≤–µ–¥–µ–º —Å–ª–µ–¥—É—é—â–µ–µ –∏–∑ —É–∂–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö

            if user_id not in last_user_poem or len(last_user_poems[user_id]) < 1:
                echo_on_error(context, update, user_id)
                return

            poem = last_user_poems[user_id][-1]

            last_user_poem[user_id] = poem
            last_user_poems[user_id] = last_user_poems[user_id][:-1]

            if len(last_user_poems[user_id]):
                keyboard = [[LIKE, DISLIKE, MORE, NEW]]
            else:
                keyboard = [[LIKE, DISLIKE], seed_generator.generate_seeds(user_id, domain=format)]

            reply_markup = ReplyKeyboardMarkup(keyboard,
                                               one_time_keyboard=True,
                                               resize_keyboard=True,
                                               per_user=True)

            context.bot.send_message(chat_id=update.message.chat_id,
                                     text=render_poem_html(last_user_poem[user_id]),
                                     reply_markup=reply_markup, parse_mode='HTML')

            return

        seed = update.message.text
        logging.info('Will generate a poem using seed="%s" for user="%s" id=%s in chat=%s', seed, update.message.from_user.name, user_id, str(update.message.chat_id))

        # 22.10.2022 –ï—Å–ª–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–∏—á–µ–≥–æ –Ω–µ –¥–∞–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≤—Å–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏ —Ñ–∏–ª—å—Ç—Ä—ã),
        # —Ç–æ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É –∏ –ø–æ–≤—Ç–æ—Ä—è–µ–º.
        temperature = 1.0
        max_temperature = 1.6
        while temperature <= max_temperature:
            ranked_poems = long_poetry_generator.generate_poems(topic=seed,
                                                                temperature=temperature, top_p=top_p, top_k=top_k, typical_p=typical_p,
                                                                num_return_sequences=5)
            poems2 = [('\n'.join(lines), score) for lines, score in ranked_poems]

            if len(poems2) > 0:
                break

            temperature *= 1.1
            logging.info('Rising temperature to %f and trying again with seed="%s" for user="%s" id=%s in chat=%s', temperature, seed, update.message.from_user.name, user_id, str(update.message.chat_id))

        if len(poems2) == 0:
            logging.info('Could not generate a poem for seed="%s" for user="%s" id=%s in chat=%s', seed, update.message.from_user.name, user_id, str(update.message.chat_id))

        last_user_poems[user_id] = []
        last_user_poem[user_id] = None

        for ipoem, (poem, score) in enumerate(poems2, start=1):
            if ipoem == 1:
                last_user_poem[user_id] = poem
            else:
                last_user_poems[user_id].append(poem)

        if last_user_poem[user_id]:
            if len(last_user_poems[user_id]):
                keyboard = [[LIKE, DISLIKE, MORE, NEW]]
            else:
                keyboard = [[LIKE, DISLIKE], seed_generator.generate_seeds(user_id, domain=format)]

            reply_markup = ReplyKeyboardMarkup(keyboard,
                                               one_time_keyboard=True,
                                               resize_keyboard=True,
                                               per_user=True)

            context.bot.send_message(chat_id=update.message.chat_id,
                                     text=render_poem_html(last_user_poem[user_id]),
                                     reply_markup=reply_markup, parse_mode='HTML')
        else:
            keyboard = [seed_generator.generate_seeds(user_id, domain=format)]
            reply_markup = ReplyKeyboardMarkup(keyboard,
                                               one_time_keyboard=True,
                                               resize_keyboard=True,
                                               per_user=True)

            context.bot.send_message(chat_id=update.message.chat_id,
                                     text='–ß—Ç–æ-—Ç–æ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è —Å–æ—á–∏–Ω–∏—Ç—å üòû\n–ó–∞–¥–∞–π—Ç–µ –¥—Ä—É–≥—É—é —Ç–µ–º—É, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞',
                                     reply_markup=reply_markup)

    except Exception as ex:
        logging.error('Error in "echo"')
        logging.error(ex)
        logging.error(traceback.format_exc())
        echo_on_error(context, update, user_id)


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Verslibre & haiku generator v.16')
    parser.add_argument('--token', type=str, default='', help='Telegram token')
    parser.add_argument('--mode', type=str, default='console', choices='console telegram'.split(), help='Frontend selector')
    parser.add_argument('--tmp_dir', default='../../tmp', type=str)
    parser.add_argument('--data_dir', default='../../data', type=str)
    parser.add_argument('--models_dir', default='../../models', type=str)
    parser.add_argument('--log', type=str, default='../../tmp/stressed_gpt_poetry_generation.{HOSTNAME}.{DATETIME}.log')

    args = parser.parse_args()
    mode = args.mode
    tmp_dir = os.path.expanduser(args.tmp_dir)
    models_dir = os.path.expanduser(args.models_dir)
    data_dir = os.path.expanduser(args.data_dir)

    init_logging(args.log, True)

    # 19-03-2022 –∑–∞–ø—Ä–µ—â–∞–µ–º —Ç–µ–Ω–∑–æ—Ä—Ñ–ª–æ—É —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞—Ç—å –≤—Å—é –ø–∞–º—è—Ç—å –≤ –≥–ø—É –ø–æ –¥–µ—Ñ–æ–ª—Ç—É, —Ç–∞–∫ –∫–∞–∫
    # —ç—Ç–æ –º–µ—à–∞–µ—Ç –ø–æ—Ç–æ–º –Ω–æ—Ä–º–∞–ª—å–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å –º–æ–¥–µ–ª—è–º –Ω–∞ —Ç–æ—Ä—á–µ.
    for gpu in tf.config.experimental.list_physical_devices('GPU'):
        tf.config.experimental.set_memory_growth(gpu, True)

    # –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–∞–¥–∂–µ—Å—Ç–æ–≤
    seed_generator = SeedGenerator(models_dir)

    # –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Ä–∏—Ñ–º–æ–≤–∞–Ω–Ω—ã—Ö —Å—Ç–∏—Ö–æ–≤
    logging.info('Loading the long poetry generation models from "%s"...', models_dir)
    long_poetry_generator = LongPoemGeneratorCore2('stressed_long_poetry_generator_medium')
    long_poetry_generator.load(models_dir, data_dir, tmp_dir)

    if args.mode == 'telegram':
        # –¢–µ–ª–µ–≥—Ä–∞–º-–≤–µ—Ä—Å–∏—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞
        telegram_token = args.token
        if len(telegram_token) == 0:
            telegram_token = getpass.getpass('Enter Telegram token:> ').strip()

        logging.info('Starting telegram bot')
        tg_bot = telegram.Bot(token=telegram_token).getMe()
        bot_id = tg_bot.name
        logging.info('Telegram bot "%s" id=%s', tg_bot.name, tg_bot.id)

        updater = Updater(token=telegram_token)
        dispatcher = updater.dispatcher

        start_handler = CommandHandler('start', start)
        dispatcher.add_handler(start_handler)

        echo_handler = MessageHandler(Filters.text & ~Filters.command, echo)
        dispatcher.add_handler(echo_handler)

        command_handler = MessageHandler(Filters.all, dbg_actions)
        dispatcher.add_handler(command_handler)
        #dispatcher.add_handler(CallbackQueryHandler(dbg_actions))

        #updater.dispatcher.add_handler(CallbackQueryHandler(format_menu, pattern='format=(.*)'))

        logging.getLogger('telegram.bot').setLevel(logging.INFO)
        logging.getLogger('telegram.vendor.ptb_urllib3.urllib3.connectionpool').setLevel(logging.INFO)

        logging.info('Start polling messages for bot %s', tg_bot.name)
        updater.start_polling()
        updater.idle()
    else:
        print('–í–≤–æ–¥–∏—Ç–µ –∑–∞—Ç—Ä–∞–≤–∫—É –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏\n')

        while True:
            topic = input(':> ').strip()

            ranked_poems = long_poetry_generator.generate_poems(topic=topic,
                                                                temperature=1.0, top_p=top_p, top_k=top_k, typical_p=typical_p,
                                                                num_return_sequences=5)

            for poem, score in ranked_poems:
                print('\nscore={}'.format(score))
                for line in poem:
                    print(line)
                print('='*50)
